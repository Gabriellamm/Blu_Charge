{"version":3,"file":"protocol.js","sources":["pages/Blu/protocol.js"],"sourcesContent":["// 协议处理模块，封装了蓝牙数据包的构建和解析，相当于iOS中的一个工具类\n// 协议常量定义\nexport const PROTOCOL = {\n  SERVICE_UUID: 'FE00',\n  NOTIFY_CHAR_UUID: 'FE01', //Notify 特征值：0xFE01（设备向小程序发送数据）\n  WRITE_CHAR_UUID: 'FE02', // Write 特征值：0xFE02（小程序向设备发送命令）\n  \n  OTA_CHAR_UUID: 'FE03', // OTA 特征值：0xFE03（用于固件升级数据传输）\n  \n  // 命令ID 命令列表   小程序 <-> 充电线 相互\n  CMD_CHARGE_CONTROL: 0x10,//充电控制暗号  小程序 -> 充电线\n  CMD_CHARGE_STATUS: 0x11, // 充电状态反馈 充电线 -> 小程序\n   \n  CMD_INIT_DEVICE: 0x20, // 初始化暗号  小程序 -> 充电线\n  CMD_INIT_RESULT: 0x21, // 初始化结果 充电线 -> 小程序\n  \n  CMD_CHANGE_NAME: 0x30, // 改藍牙名暗号  小程序 -> 充电线\n  CMD_CHANGE_NAME_RESULT: 0x31, // 变更蓝牙名称结果 充电线 -> 小程序\n  \n  // OTA 命令\n  CMD_OTA_START: 0x01,//开始下发升级固件\n  CMD_OTA_END: 0x02, //结束下发升级固件\n  \n  // 分包标志\n  PACKET_FIRST: 0x80,\n  PACKET_MIDDLE: 0x40,\n  PACKET_LAST: 0xC0,\n  \n  // MTU限制\n  MAX_PACKET_SIZE: 20 // 每次最多能说20个字\n}\n\n// 数据包构建器 相当于一个数据处理的 Helper 类  用于将这个类导出，使得其他文件可以通过 import 引入并使用它，实现代码复用。\n// 例如，在其他文件中使用：\n// 运行\n// import { PacketBuilder } from './PacketBuilder.js';\n\n// // 创建实例并使用\n// const packet = new PacketBuilder()\n//   .addField('type', 'login')\n//   .addField('username', 'test')\n//   .build();\nexport class PacketBuilder { \n  // 构建应用层数据包（Header + Payload + Checksum）\n  static buildAppPacket(cmdId, payload) {\n    // Header: 2字节（命令类型 + 版本号 + 标志位） //1. 写信封头（2字节）：告诉设备这是什么信\n    const header = new ArrayBuffer(2)\n    const headerView = new DataView(header)\n    headerView.setUint8(0, cmdId)        // 命令类型 第一字节：信的类型（充电/初始化...）\n    headerView.setUint8(1, 0x01)         // 版本号1.0 + 标志位 第二字节：协议版本号\n    \n    // 合并Header和Payload\n    const payloadBuffer = this._arrayToBuffer(payload)\n\t//2. 把信的内容和信封头装在一起\n    const fullData = this._concatBuffers(header, payloadBuffer)\n    \n    // 计算校验和（累加和取反）// 3. 计算校验码（防止信被篡改）\n    const checksum = this._calculateChecksum(fullData)\n    \n    // 最终数据包 4. 最终的信 = 信封头 + 信的内容 + 校验码\n    return this._concatBuffers(fullData, new Uint8Array([checksum]).buffer)\n  }\n  \n  // 传输层分包（兼容BLE MTU限制）\n  static splitPackets(appPacket) {\n    const packets = []\n    const dataView = new Uint8Array(appPacket)\n    const totalLength = dataView.length\n    \n    for (let i = 0; i < totalLength; i += PROTOCOL.MAX_PACKET_SIZE - 1) {\n      const chunk = dataView.slice(i, i + PROTOCOL.MAX_PACKET_SIZE - 1)\n      const packet = new ArrayBuffer(PROTOCOL.MAX_PACKET_SIZE)\n      const packetView = new DataView(packet)\n      \n      // 设置分包标志\n      let flag = PROTOCOL.PACKET_MIDDLE\n      if (i === 0) {\n        flag = PROTOCOL.PACKET_FIRST\n      } else if (i + PROTOCOL.MAX_PACKET_SIZE - 1 >= totalLength) {\n        flag = PROTOCOL.PACKET_LAST\n      }\n      \n      packetView.setUint8(0, flag)\n      for (let j = 0; j < chunk.length; j++) {\n        packetView.setUint8(j + 1, chunk[j])\n      }\n      \n      packets.push(packet)\n    }\n    \n    return packets\n  }\n  \n  // 构建控制充电命令\n  static buildChargeCommand(operationType, duration) {\n    const payload = new ArrayBuffer(3)\n    const view = new DataView(payload)\n    view.setUint8(0, operationType)  // 操作类型：0关闭，1开启\n    view.setUint16(1, duration, false) // 时长（大端序，2字节）\n    return this.buildAppPacket(PROTOCOL.CMD_CHARGE_CONTROL, new Uint8Array(payload))\n  }\n  \n  // 构建设备初始化命令\n  static buildInitCommand(authCode, disconnectTimeout, chargeCloseTimeout) {\n    // 鉴权码：CJC000001 转16进制（9字节）\n    const authArray = this._stringToHexArray(authCode)\n    \n    const payload = new ArrayBuffer(11) // 9+1+1\n    const view = new DataView(payload)\n    \n    // 写入鉴权码（9字节）\n    for (let i = 0; i < 9; i++) {\n      view.setUint8(i, authArray[i] || 0)\n    }\n    \n    // 蓝牙断连时长（1字节）\n    view.setUint8(9, disconnectTimeout)\n    // 充电关闭时长（1字节）\n    view.setUint8(10, chargeCloseTimeout)\n    \n    return this.buildAppPacket(PROTOCOL.CMD_INIT_DEVICE, new Uint8Array(payload))\n  }\n  \n  // 构建改名命令\n  static buildChangeNameCommand(newName) {\n    const nameArray = this._stringToHexArray(newName.padEnd(9, '\\0'))\n    return this.buildAppPacket(PROTOCOL.CMD_CHANGE_NAME, nameArray)\n  }\n  \n  // 解析设备返回的数据包\n  static parseDeviceResponse(buffer) {\n    const dataView = new Uint8Array(buffer)\n    \n    if (dataView.length < 3) {\n      throw new Error('数据包长度不足')\n    }\n    \n    // 验证校验和\n    const receivedChecksum = dataView[dataView.length - 1]\n    const calculatedChecksum = this._calculateChecksum(buffer.slice(0, -1))\n    \n    if (receivedChecksum !== calculatedChecksum) {\n      throw new Error('校验和错误')\n    }\n    \n    const cmdId = dataView[0]\n    const payload = dataView.slice(1, -1) // 去掉Header和Checksum\n    \n    return { cmdId, payload }\n  }\n  \n  // 工具函数\n  static _calculateChecksum(buffer) {\n    const dataView = new Uint8Array(buffer)\n    let sum = 0\n    for (let i = 0; i < dataView.length; i++) {\n      sum = (sum + dataView[i]) & 0xFF\n    }\n    return (~sum) & 0xFF // 累加和取反\n  }\n  \n  static _arrayToBuffer(array) {\n    const buffer = new ArrayBuffer(array.length)\n    const view = new Uint8Array(buffer)\n    view.set(array)\n    return buffer\n  }\n  \n  static _concatBuffers(buffer1, buffer2) {\n    const array1 = new Uint8Array(buffer1)\n    const array2 = new Uint8Array(buffer2)\n    const result = new Uint8Array(array1.length + array2.length)\n    result.set(array1)\n    result.set(array2, array1.length)\n    return result.buffer\n  }\n  \n  static _stringToHexArray(str) {\n    const result = []\n    for (let i = 0; i < str.length; i++) {\n      result.push(str.charCodeAt(i))\n    }\n    return result\n  }\n  \n  // ArrayBuffer转16进制字符串（用于调试）\n  static ab2hex(buffer) {\n    const hexArr = Array.prototype.map.call(\n      new Uint8Array(buffer),\n      bit => ('00' + bit.toString(16)).slice(-2)\n    )\n    return hexArr.join(' ')\n  }\n}"],"names":[],"mappings":"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"}