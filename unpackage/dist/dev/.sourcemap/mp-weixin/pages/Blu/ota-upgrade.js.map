{"version":3,"file":"ota-upgrade.js","sources":["pages/Blu/ota-upgrade.js"],"sourcesContent":["// OTA升级相关常量\nexport const OTA_PROTOCOL = {\n  // OTA服务UUID（根据文档第6页）\n  OTA_SERVICE_UUID: 'TELINK_SPP_DATA_OTA',\n  \n  // OTA命令操作码（文档第6页表格）\n  CMD_OTA_VERSION: 0xFF00,    // 获取版本\n  CMD_OTA_START: 0xFF01,      // 开始升级\n  CMD_OTA_END: 0xFF02,        // 结束升级\n  \n  // OTA数据包格式（文档第7页）\n  OTA_PACKET_SIZE: 20,        // 每包20字节\n  DATA_CHUNK_SIZE: 16,        // 每包数据部分16字节\n  ADR_INDEX_SIZE: 2,          // 地址索引2字节\n  CRC16_SIZE: 2,              // CRC校验2字节\n}\n\n// OTA升级管理器\nexport class OTAUpgradeManager {\n  constructor() {\n    this.isUpgrading = false\n    this.currentProgress = 0\n    this.totalPackets = 0\n    this.sentPackets = 0\n    this.firmwareData = null\n    this.deviceId = null\n    this.serviceId = null\n    this.characteristicId = null\n  }\n\n  /**\n   * 检查设备固件版本（文档3.1.7.1）\n   */\n  async checkFirmwareVersion(deviceId, serviceId, characteristicId) {\n    try {\n      // 发送获取版本命令（文档第6页：CMD_OTA_VERSION）\n      const versionCommand = this.buildOTACommand(OTA_PROTOCOL.CMD_OTA_VERSION, new ArrayBuffer(2))\n      \n      await this.sendOTACommand(deviceId, serviceId, characteristicId, versionCommand)\n      \n      // 这里需要监听设备返回的版本信息\n      // 实际实现中需要设置回调来处理版本信息\n      return await this.waitForVersionResponse()\n      \n    } catch (error) {\n      console.error('检查固件版本失败:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 开始OTA升级流程（文档3.1.7.2）\n   */\n  async startOTAUpgrade(deviceInfo, firmwareUrl) {\n    if (this.isUpgrading) {\n      throw new Error('正在升级中，请等待完成')\n    }\n\n    try {\n      this.isUpgrading = true\n      this.currentProgress = 0\n      \n      // 1. 从服务器下载固件文件（准备阶段）\n      this.firmwareData = await this.downloadFirmware(firmwareUrl)\n      \n      // 2. 连接OTA服务\n      await this.connectOTAService(deviceInfo)\n      \n      // 3. 发送开始升级命令（启动阶段）\n      await this.sendStartCommand()\n      \n      // 4. 传输固件数据（数据传输阶段）\n      await this.transmitFirmwareData()\n      \n      // 5. 发送结束命令（结束阶段）\n      await this.sendEndCommand()\n      \n      // 6. 等待设备重启并验证\n      await this.verifyUpgrade()\n      \n      return true\n      \n    } catch (error) {\n      console.error('OTA升级失败:', error)\n      this.isUpgrading = false\n      throw error\n    } finally {\n      this.isUpgrading = false\n    }\n  }\n\n  /**\n   * 下载固件文件（文档第7页：从服务器中读取升级固件文件）\n   */\n  async downloadFirmware(firmwareUrl) {\n    return new Promise((resolve, reject) => {\n      // 使用uni-app的网络请求下载固件\n      uni.downloadFile({\n        url: firmwareUrl,\n        success: (res) => {\n          if (res.statusCode === 200) {\n            // 读取文件内容\n            uni.getFileSystemManager().readFile({\n              filePath: res.tempFilePath,\n              success: (fileRes) => {\n                const firmware = new Uint8Array(fileRes.data)\n                console.log(`固件下载成功，大小: ${firmware.length} 字节`)\n                resolve(firmware)\n              },\n              fail: reject\n            })\n          } else {\n            reject(new Error(`下载失败，状态码: ${res.statusCode}`))\n          }\n        },\n        fail: reject\n      })\n    })\n  }\n\n  /**\n   * 连接OTA服务（切换到OTA专用的蓝牙服务）\n   */\n  async connectOTAService(deviceInfo) {\n    // 保存设备信息用于后续通信\n    this.deviceId = deviceInfo.deviceId\n    \n    // 发现OTA服务\n    const services = await this.discoverServices(deviceInfo.deviceId)\n    const otaService = services.find(s => \n      s.uuid.toLowerCase().includes(OTA_PROTOCOL.OTA_SERVICE_UUID.toLowerCase())\n    )\n    \n    if (!otaService) {\n      throw new Error('未找到OTA服务')\n    }\n    \n    this.serviceId = otaService.uuid\n    \n    // 发现OTA特征值\n    const characteristics = await this.discoverCharacteristics(deviceInfo.deviceId, otaService.uuid)\n    const writeCharacteristic = characteristics.find(c => c.properties.write)\n    \n    if (!writeCharacteristic) {\n      throw new Error('未找到OTA写入特征值')\n    }\n    \n    this.characteristicId = writeCharacteristic.uuid\n  }\n\n  /**\n   * 发送开始升级命令（文档第7页：CMD_OTA_START）\n   */\n  async sendStartCommand() {\n    // 构建开始命令：2字节Opcode + 2字节保留字段\n    const startCommand = this.buildOTACommand(OTA_PROTOCOL.CMD_OTA_START, new ArrayBuffer(2))\n    await this.sendOTACommand(this.deviceId, this.serviceId, this.characteristicId, startCommand)\n    console.log('OTA开始命令发送成功')\n  }\n\n  /**\n   * 传输固件数据（核心功能 - 文档第7页分片传输）\n   */\n  async transmitFirmwareData() {\n    const firmware = this.firmwareData\n    this.totalPackets = Math.ceil(firmware.length / OTA_PROTOCOL.DATA_CHUNK_SIZE)\n    this.sentPackets = 0\n\n    console.log(`开始传输固件，总包数: ${this.totalPackets}`)\n\n    // 分批发送，每50包更新一次进度\n    const BATCH_SIZE = 50\n    \n    for (let batchStart = 0; batchStart < this.totalPackets; batchStart += BATCH_SIZE) {\n      const batchEnd = Math.min(batchStart + BATCH_SIZE, this.totalPackets)\n      \n      // 并行发送当前批次的所有包\n      const promises = []\n      for (let i = batchStart; i < batchEnd; i++) {\n        promises.push(this.sendFirmwarePacket(i))\n      }\n      \n      await Promise.all(promises)\n      \n      // 更新进度（文档第7页：每发送50个数据包更新一次进度条）\n      this.updateProgress(batchEnd)\n      \n      // 短暂延迟，避免发送过快\n      await this.delay(100)\n    }\n  }\n\n  /**\n   * 发送单个固件数据包（文档第7页构造OTA数据包）\n   */\n  async sendFirmwarePacket(packetIndex) {\n    const firmware = this.firmwareData\n    \n    // 计算数据块的起始和结束位置\n    const start = packetIndex * OTA_PROTOCOL.DATA_CHUNK_SIZE\n    const end = Math.min(start + OTA_PROTOCOL.DATA_CHUNK_SIZE, firmware.length)\n    \n    // 获取数据块\n    let chunk = firmware.slice(start, end)\n    \n    // 如果数据不足16字节，用0xFF填充（文档第8页）\n    if (chunk.length < OTA_PROTOCOL.DATA_CHUNK_SIZE) {\n      const paddedChunk = new Uint8Array(OTA_PROTOCOL.DATA_CHUNK_SIZE)\n      paddedChunk.set(chunk)\n      paddedChunk.fill(0xFF, chunk.length)\n      chunk = paddedChunk\n    }\n    \n    // 构建OTA数据包（adr_index + 16字节数据 + CRC16）\n    const otaPacket = this.buildOTAPacket(packetIndex, chunk)\n    \n    // 发送数据包（使用Write Without Response）\n    await this.sendOTACommand(this.deviceId, this.serviceId, this.characteristicId, otaPacket)\n    \n    this.sentPackets++\n  }\n\n  /**\n   * 构建OTA数据包（文档第7页示例代码）\n   */\n  buildOTAPacket(adrIndex, firmwareChunk) {\n    // 数据包结构：2B adr_index + 16B数据 + 2B CRC = 20B\n    const buffer = new ArrayBuffer(OTA_PROTOCOL.OTA_PACKET_SIZE)\n    const view = new DataView(buffer)\n\n    // 写入adr_index（小端序 - 文档第7页示例）\n    view.setUint16(0, adrIndex, true)\n\n    // 写入16字节固件数据\n    for (let i = 0; i < OTA_PROTOCOL.DATA_CHUNK_SIZE; i++) {\n      view.setUint8(2 + i, firmwareChunk[i])\n    }\n\n    // 计算CRC16（前18字节：adr_index + 数据）\n    const crc = this.calculateCRC16(buffer.slice(0, 18))\n    view.setUint16(18, crc, true) // CRC小端序写入\n\n    return buffer\n  }\n\n  /**\n   * CRC16计算（文档第8页代码）\n   */\n  calculateCRC16(data) {\n    let crc = 0x0000\n    const buffer = new Uint8Array(data)\n\n    for (let i = 0; i < buffer.length; i++) {\n      crc ^= buffer[i] << 8\n      for (let j = 0; j < 8; j++) {\n        if (crc & 0x8000) {\n          crc = (crc << 1) ^ 0x1021\n        } else {\n          crc = crc << 1\n        }\n        crc &= 0xFFFF // 确保结果为16位\n      }\n    }\n    return crc\n  }\n\n  /**\n   * 发送结束命令（文档第7页：CMD_OTA_END）\n   */\n  async sendEndCommand() {\n    // 计算最大adr_index和异或校验值\n    const maxAdrIndex = this.totalPackets - 1\n    const xorValue = maxAdrIndex ^ 0xFFFF\n    \n    // 构建结束命令：Opcode + max_adr_index + xor_value\n    const endBuffer = new ArrayBuffer(6) // 2B Opcode + 2B max_adr_index + 2B xor_value\n    const view = new DataView(endBuffer)\n    \n    view.setUint16(0, OTA_PROTOCOL.CMD_OTA_END, true)    // Opcode\n    view.setUint16(2, maxAdrIndex, true)                 // 最大adr_index\n    view.setUint16(4, xorValue, true)                    // 异或校验值\n    \n    await this.sendOTACommand(this.deviceId, this.serviceId, this.characteristicId, endBuffer)\n    console.log('OTA结束命令发送成功')\n  }\n\n  /**\n   * 验证升级结果（文档第7页：验证版本号是否匹配）\n   */\n  async verifyUpgrade() {\n    console.log('等待设备重启...')\n    \n    // 等待设备重启（通常需要几秒钟）\n    await this.delay(5000)\n    \n    // 重新连接设备\n    // 这里需要实现重新扫描和连接逻辑\n    await this.reconnectDevice()\n    \n    // 重新检查版本号\n    const newVersion = await this.checkFirmwareVersion(\n      this.deviceId, \n      this.serviceId, \n      this.characteristicId\n    )\n    \n    // 与预期版本比较（这里需要从服务器获取预期版本）\n    const expectedVersion = await this.getExpectedVersion()\n    \n    if (newVersion === expectedVersion) {\n      console.log('OTA升级成功！')\n      return true\n    } else {\n      throw new Error(`版本不匹配: 当前${newVersion}, 预期${expectedVersion}`)\n    }\n  }\n\n  /**\n   * 构建OTA命令（通用命令构建）\n   */\n  buildOTACommand(opcode, data) {\n    const buffer = new ArrayBuffer(2 + (data ? data.byteLength : 0))\n    const view = new DataView(buffer)\n    \n    view.setUint16(0, opcode, true) // Opcode小端序\n    \n    if (data) {\n      const dataView = new Uint8Array(data)\n      for (let i = 0; i < dataView.length; i++) {\n        view.setUint8(2 + i, dataView[i])\n      }\n    }\n    \n    return buffer\n  }\n\n  /**\n   * 发送OTA命令（使用Write Without Response）\n   */\n  async sendOTACommand(deviceId, serviceId, characteristicId, data) {\n    return new Promise((resolve, reject) => {\n      uni.writeBLECharacteristicValue({\n        deviceId: deviceId,\n        serviceId: serviceId,\n        characteristicId: characteristicId,\n        value: data,\n        writeType: 'writeWithoutResponse', // 关键参数，不等待响应\n        success: resolve,\n        fail: (err) => {\n          console.error('OTA命令发送失败:', err)\n          reject(err)\n        }\n      })\n    })\n  }\n\n  /**\n   * 更新进度条（文档第7页进度计算公式）\n   */\n  updateProgress(currentPacketIndex) {\n    // 进度 = (当前adr_index * 16) / 固件总大小 * 100%\n    const progress = Math.round((currentPacketIndex * OTA_PROTOCOL.DATA_CHUNK_SIZE) / this.firmwareData.length * 100)\n    this.currentProgress = Math.min(progress, 100)\n    \n    // 触发进度更新事件（实际项目中应该用回调或Vuex）\n    if (this.onProgressUpdate) {\n      this.onProgressUpdate(this.currentProgress)\n    }\n    \n    console.log(`OTA升级进度: ${this.currentProgress}%`)\n  }\n\n  // 工具函数\n  discoverServices(deviceId) {\n    return new Promise((resolve, reject) => {\n      uni.getBLEDeviceServices({\n        deviceId: deviceId,\n        success: (res) => resolve(res.services),\n        fail: reject\n      })\n    })\n  }\n\n  discoverCharacteristics(deviceId, serviceId) {\n    return new Promise((resolve, reject) => {\n      uni.getBLEDeviceCharacteristics({\n        deviceId: deviceId,\n        serviceId: serviceId,\n        success: (res) => resolve(res.characteristics),\n        fail: reject\n      })\n    })\n  }\n\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  // 这些方法需要根据实际项目实现\n  async waitForVersionResponse() {\n    // 实际实现中需要监听特征值通知来获取版本信息\n    // 这里返回模拟数据\n    return 'CC1_V1.1'\n  }\n\n  async reconnectDevice() {\n    // 重新连接设备的逻辑\n    console.log('重新连接设备...')\n  }\n\n  async getExpectedVersion() {\n    // 从服务器获取预期版本号\n    return 'CC1_V1.1'\n  }\n\n  // 设置进度回调\n  setProgressCallback(callback) {\n    this.onProgressUpdate = callback\n  }\n\n  // 获取当前状态\n  getUpgradeStatus() {\n    return {\n      isUpgrading: this.isUpgrading,\n      progress: this.currentProgress,\n      totalPackets: this.totalPackets,\n      sentPackets: this.sentPackets\n    }\n  }\n}\n\n// 创建单例实例\nexport const otaManager = new OTAUpgradeManager()"],"names":["uni"],"mappings":"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"}